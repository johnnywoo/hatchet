# This is a grammar for hatchet grammar files.

# Token definition without a name is the root one. It must cover the whole parsed file.
# Square brackets are for 'may be present or not'.
# Curly braces are for 'repeats any number of times, including zero'.
# Values in quotes are literals.
: [line {"\n" line}]

# Names of tokens are case sensitive.
# "|" is for alternative paths, it is bounded by () {} [] or
# the whole definition if there are no boundaries.
line: [comment | DEFINITION]

# Parentheses are for grouping.
# The name is uppercased by convention: nodes with names not starting with
# an uppercase char are anonymized (replaced with child nodes).
# It is implemented in the parser of grammars; Hatchet does NOT do this by default!
DEFINITION: [NAME] ":" (REGEXP | BODY)

# Alternatives with only one option are optimized out (again, this is not default),
# but we always want the definition body to be separate from its name,
# so we wouldn't confuse root definition with a named one.
BODY: ALTERNATIVE-TOKENS

# Alternatives are separated by a pipe character "|".
ALTERNATIVE-TOKENS: TOKENS {"|" TOKENS}

# Hatchet assumes that any number of whitespace chars may occur between tokens;
# we use special token _whitespace_ here to force at least one whitespace char.
TOKENS: token {_whitespace_ token}

token: LITERAL | NAME | NATIVE-NAME | grouping | CONDITION | MULTIPLIER

# Special token _quoted_ is for a quoted string. PHP escaping is used in the string
# for special characters. We use it under a separate name here to capture the quoted
# string separately, so we can dequote it.
LITERAL: _quoted_

grouping: "(" ALTERNATIVE-TOKENS ")"
CONDITION: "[" ALTERNATIVE-TOKENS "]"
MULTIPLIER: "{" ALTERNATIVE-TOKENS "}"

NATIVE-NAME: "_quoted_" | "_whitespace_"

# A token may be defined as a regexp.
# The regexp should not have ^ or $ to work properly!
# Please note that regexp can only be set as the whole token definition,
# it cannot be inside of complex definitions!
NAME: /[a-zA-Z0-9_-]+/
comment: /#[^\n]*+/
REGEXP: /\/[^\n]*+/